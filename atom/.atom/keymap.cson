# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson
'body':
  'shift-cmd-T': 'pane:reopen-closed-item'
  '\\ f': 'fuzzy-finder:toggle-file-finder'
  '\\ r': 'fuzzy-finder:toggle-file-finder'
  '\\ p': 'command-palette:toggle'
  '\\ a': 'fuzzy-grep:toggle'
  '\\ b': 'pane:show-previous-item'
  '\\ |': 'pane:split-left'
  '\\ -': 'pane:split-down'
  '\\ c': 'whitespace:remove-trailing-whitespace'

'atom-workspace':
  'ctrl-i':     'cursor-history:next'
  'ctrl-o':     'cursor-history:prev'
  'ctrl-cmd-i': 'cursor-history:next-within-editor'
  'ctrl-cmd-o': 'cursor-history:prev-within-editor'

# Terminal plus
'.platform-darwin atom-workspace':
  'cmd-t': 'terminal-plus:toggle'
  'shift-cmd-X': 'terminal-plus:close'

'.editor.vim-mode.insert-mode':
  'k': 'exit-insert-mode-if-preceded-by-j'
