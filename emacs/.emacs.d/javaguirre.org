#+TITLE: Javier Aguirre's Emacs 24 Configuration
#+AUTHOR: Javier Aguirre
#+EMAIL: hello@javaguirre.net
#+OPTIONS: toc:3 num:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />

* Configuration
  Configuration based on Aaron Bedra's https://github.com/abedra/emacs.d

  Configuration improved from joedicastro's https://github.com/joedicastro/dotfiles/tree/master/emacs
** User details
   :PROPERTIES:
   :CUSTOM_ID: user-info
   :END:

   Emacs will normally pick this up automatically, but this way I can
   be sure the right information is always present.
   #+begin_src emacs-lisp
     (setq user-full-name "Javier Aguirre")
     (setq user-mail-address "hello@javaguirre.net")
   #+end_src
** Environment
   :PROPERTIES:
   :CUSTOM_ID: environment
   :END:

   Set PATH for Emacs
   #+begin_src emacs-lisp
     (setenv "PATH"
       (concat (getenv "PATH")
	 ":/usr/local/bin"))
   #+end_src
** Package Management
   :PROPERTIES:
   :CUSTOM_ID: package-management
   :END:

   We use use-package to install packages and manage the configuration
   #+begin_src emacs-lisp
     (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                              ("melpa" . "http://melpa.org/packages/")
                              ("melpa-stable" . "http://stable.melpa.org/packages/")
                              ("org" . "http://orgmode.org/elpa/")))

     ;; avoid problems with files newer than their byte-compiled counterparts
     ;; it's better a lower startup than load an outdated and maybe bugged package
     (setq load-prefer-newer t)

     (package-initialize)
     (when (not package-archive-contents)
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))
   #+end_src
** Default startup options
    :PROPERTIES:
    :CUSTOM_ID: splash-screen
    :END:
    Start with *scratch* and other default options
    #+begin_src emacs-lisp
      (setq inhibit-splash-screen t
            inhibit-startup-screen t
            visible-bell t
            echo-keystrokes 0.1
            use-dialog-box nil
            apropos-do-all t
            initial-scratch-message nil)

      (blink-cursor-mode -1)

      ;; delete the previous selection when overrides it with a new insertion.
      (delete-selection-mode t)

      (defalias 'list-buffers 'ibuffer)

      (toggle-indicate-empty-lines)

      (show-paren-mode 1)
    #+end_src
*** Font
    Font selection
    #+begin_src emacs-lisp
      (add-to-list 'default-frame-alist '(font . "Source Code Pro for Powerline-12"))
      (set-face-attribute 'default t :font "Source Code Pro for Powerline-12")
    #+end_src
*** Garbage collector threshold
    Emacs for OS X crashes a lot, let see if
    increasing garbage collector solves the issue

    The threshold is in bytes
    #+begin_src emacs-lisp
      (setq gc-cons-threshold 100000000)
    #+end_src
*** Remove all bars
    :PROPERTIES:
    :CUSTOM_ID: menu-bars
    :END:

    Emacs starts up with way too much enabled. Turn off the scroll bar,
    menu bar, and tool bar. There isn't really a reason to have them
    on.
    #+begin_src emacs-lisp
      (if (display-graphic-p)
       (scroll-bar-mode -1))
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (tooltip-mode -1)
    #+end_src
*** Indentation
    :PROPERTIES:
    :CUSTOM_ID: indentation
    :END:

    There's nothing I dislike more than tabs in my files. Make sure I
    don't share that discomfort with others.
    #+begin_src emacs-lisp
      (setq-default indent-tabs-mode nil)
      (setq tab-width 4)
    #+end_src
*** Backup files
    :PROPERTIES:
    :CUSTOM_ID: backup-files
    :END:

    Some people like to have them. I don't. Rather than pushing them
    to a folder, never to be used, just turn the whole thing off.
    #+begin_src emacs-lisp
      (setq make-backup-files nil)
    #+end_src
*** Yes and No
    :PROPERTIES:
    :CUSTOM_ID: yes-and-no
    :END:

    Nobody likes to have to type out the full yes or no when Emacs
    asks. Which it does often. Make it one character.
    #+begin_src emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src
** Themes
    #+begin_src emacs-lisp
      (use-package material-theme
        :ensure t
        :config
        (load-theme 'material-light t))
      (use-package ample-theme
        :disabled t
        :ensure t)
    #+end_src
** Internal modes
   Configuration for Emacs internal modules
*** Desktop mode
    #+begin_src emacs-lisp
	(use-package desktop
          :disabled t
	  :config
	  (progn
	    (setq desktop-path '("~/.emacs.d/tmp/"))
	    (setq desktop-dirname "~/.emacs.d/tmp/")
	    (setq desktop-base-file-name "emacs-desktop")
	    (setq desktop-globals-to-save
		(append '((extended-command-history . 50)
			  (file-name-history . 200)
			  (grep-history . 50)
			  (compile-history . 50)
			  (minibuffer-history . 100)
			  (query-replace-history . 100)
			  (read-expression-history . 100)
			  (regexp-history . 100)
			  (regexp-search-ring . 100)
			  (search-ring . 50)
			  (shell-command-history . 50)
			  tags-file-name
			  register-alist)))
	    (desktop-save-mode 1)))
    #+end_src
*** Auto revert buffer
    #+begin_src emacs-lisp
      (global-auto-revert-mode)
      (setq auto-revert-verbose nil)
    #+end_src
** External packages
*** Org mode
    #+begin_src emacs-lisp
    (use-package org
      :ensure t
      :config
      (progn
        (setq org-time-clocksum-format
          (quote
           (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
        (setq org-pretty-entities t)
        (setq org-src-preserve-indentation t)
        (setq org-startup-folded nil)))
    #+end_src
*** Magit
    #+begin_src emacs-lisp
      (use-package magit
        :ensure t)
    #+end_src
*** Highlight
    Better highlight when searching, like hlsearch in vim
    #+begin_src emacs-lisp
      (use-package highlight
        :ensure t)
      #+end_src
*** Evil
    Evil mode
    #+begin_src emacs-lisp
      (use-package evil
        :ensure t
        :config
        (evil-mode 1))
      (use-package evil-surround
        :ensure t)
      (use-package evil-magit
        :ensure t)
      (use-package evil-nerd-commenter
        :ensure t
        :config
        (evilnc-default-hotkeys))
      (use-package evil-smartparens
        :ensure t)
      (use-package evil-search-highlight-persist
        :ensure t
        :config
        (progn
          (global-evil-search-highlight-persist t)
          (setq evil-search-highlight-string-min-len 3)))
      (use-package evil-surround
        :ensure t
        :config
        (global-evil-surround-mode))
    #+end_src
*** Evil leader
    #+begin_src emacs-lisp
      (use-package evil-leader
        :ensure t
        :config
        (progn
          (global-evil-leader-mode)

          (evil-leader/set-key
	        "c" 'delete-trailing-whitespace)

          ;; Magit
          (evil-leader/set-key
            "m" 'magit-status)

          ;; ORG
          (add-hook 'org-mode-hook
                    (lambda ()
            (evil-leader/set-key
	       "d" 'org-time-stamp)
            (evil-leader/set-key
	       "i" 'org-clock-in)
            (evil-leader/set-key
	       "o" 'org-clock-out)))

          ;; Evil nerd commenter
          (evil-leader/set-key
            "\\" 'evilnc-comment-operator)

          ;; Window split
          (evil-leader/set-key
            "|" 'split-window-right)
          (evil-leader/set-key
            "-" 'split-window-below)
          (evil-leader/set-key
            "w" 'ffap-other-window)

          ;; Helm
          (evil-leader/set-key
            "r" 'helm-recentf )
          (evil-leader/set-key
	        "b" 'helm-buffers-list)

          ;; Terminal
          (evil-leader/set-key
            "s" 'ansi-term)

          ;; Eval buffer
          (evil-leader/set-key
	    "e" '(lambda ()
	    (interactive)
	    (eval-buffer)
	    (message "Buffer evaluated")))))
    #+end_src
*** Key chord
    I am using jk to move back to normal mode
    #+begin_src emacs-lisp
      (use-package key-chord
        :ensure t
        :config
        (progn
          (setq key-chord-two-keys-delay 0.5)
          (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
          (key-chord-mode 1)))
    #+end_src
*** Rest client
    #+begin_src emacs-lisp
      (use-package restclient
        :ensure t)
      #+end_src
*** Smart parentheses
    #+begin_src emacs-lisp
      (use-package smartparens
        :ensure t
        :config
	(progn
          (smartparens-global-mode t)
          (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))
    #+end_src
*** Smart mode line
    #+begin_src emacs-lisp
    (use-package smart-mode-line
      :ensure t
      :config
      (progn
        (setq sml/theme 'light)
        (setq sml/no-confirm-load-theme t)
        (sml/setup)))
    #+end_src
*** Nyan
    #+begin_src emacs-lisp
    (use-package nyan-mode
      :ensure t
      :config
      (nyan-mode t))
    #+end_src
*** Paradox
    Modern Emacs Package Menu
    #+begin_src emacs-lisp
      (use-package paradox
        :ensure t
        :config
        (setq paradox-execute-asynchronously t))
    #+end_src
*** Shell
    Ansi-term.
    Set default shell to ZSH, killing buffer when exiting
    #+begin_src emacs-lisp
      (setq term-ansi-default-program "/bin/zsh")

      (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
	(if (memq (process-status proc) '(signal exit))
	    (let ((buffer (process-buffer proc)))
		ad-do-it
		(kill-buffer buffer))
	    ad-do-it))
      (ad-activate 'term-sentinel)
    #+end_src
    Use zsh without asking which program to run
    #+begin_src emacs-lisp
      (defadvice ansi-term (before force-bash)
        (interactive (list term-ansi-default-program)))
      (ad-activate 'ansi-term)
    #+end_src
    We disable variables and mode clashing with It
    #+begin_src emacs-lisp
      (add-hook 'term-mode-hook (lambda()
        (goto-address-mode)
        (yas-minor-mode -1)
        (setq-default show-trailing-whitespace nil)))
    #+end_src
*** Recent files
    #+begin_src emacs-lisp
      (use-package recentf
        :ensure t
        :config
        (progn
          (recentf-mode 1)
          (setq recentf-max-menu-items 200)))
    #+end_src
*** Guide key
    #+begin_src emacs-lisp
      (use-package guide-key
        :ensure t
        :config
        (progn
          (setq guide-key/guide-key-sequence
           '("C-x r" "C-x 4" "C-x v"))
          (guide-key-mode 1)))
    #+end_src
*** Yasnippet
    #+begin_src emacs-lisp
      (use-package yasnippet
        :ensure t
        :config
        (progn
          (yas-global-mode)
          (add-to-list 'yas-snippet-dirs
            "~/.emacs.d/snippets")))
    #+end_src
*** OSX Clipboard
    #+begin_src emacs-lisp
    (use-package osx-clipboard
      :ensure t
      :config
      (osx-clipboard-mode +1))
    #+end_src
*** Fill column indicator
     Adds a vertical line to control line width
     #+begin_src emacs-lisp
       (use-package fill-column-indicator
         :ensure t
         :config
         (progn
           (setq fci-rule-column 80)
           (setq fci-rule-character-color "dimgray")
           (setq fci-rule-color "dimgray")
           (setq fci-rule-use-dashes t)
           (add-hook 'prog-mode-hook 'fci-mode)))
     #+end_src
*** Flycheck
    #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :config
      (add-hook 'after-init-hook #'global-flycheck-mode)
        '(flycheck-display-errors-delay 1))
    #+end_src
*** Projectile
    #+begin_src emacs-lisp
      (use-package projectile
        :ensure t
        :config
        (progn
	  (projectile-global-mode)
	  (evil-leader/set-key
            "a" 'helm-projectile-ag)
	  (evil-leader/set-key
              "t" 'projectile-find-tag)
	  (evil-leader/set-key
              "f" 'helm-projectile-find-file-dwim)
	  (setq
	    projectile-tags-command
	    "/usr/local/bin/ctags -Re --langmap=php:.inc.module.install.php --exclude=.git --totals=yes --exclude=vendor -f TAGS")))
    #+end_src
*** Helm
    #+begin_src emacs-lisp
      (use-package helm
        :ensure t
        :config
        (progn
          (helm-mode 1)
          (global-set-key (kbd "M-x") 'helm-M-x)
          (global-set-key (kbd "C-x C-f") 'helm-find-files)
          (global-set-key (kbd "C-x b") 'helm-buffers-list)
          (custom-set-variables
	    '(helm-ag-base-command "/usr/local/bin/ag --nocolor --nogroup --ignore-case")
	    '(helm-ag-command-option "--all-text")
	    '(helm-ag-insert-at-point 'symbol))))
     (use-package helm-ag
       :ensure t)
     (use-package helm-projectile
       :ensure t)
    #+end_src
*** Git Gutter
    #+begin_src emacs-lisp
    (use-package git-gutter
      :ensure t
      :config
      (progn
	(global-git-gutter-mode +1)
	(setq git-gutter:modified-sign "~")
	(set-face-foreground 'git-gutter:modified "orange")
	(evil-leader/set-key
	  "g" 'git-gutter:next-hunk)))
    #+end_src
*** Rainbow delimiters
    #+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+end_src
*** Ido
    =Ido= mode provides a nice way to navigate the filesystem. This is
    mostly just turning it on.
    #+begin_src emacs-lisp
      (ido-mode t)
      (setq ido-enable-flex-matching t
            ido-use-virtual-buffers t
            ido-everywhere t)
    #+end_src
*** Linum
    #+begin_src emacs-lisp
      (global-linum-mode 1)
      (setq linum-format "%3d ")
      (global-hl-line-mode 1)
    #+end_src
*** Column number mode
    Turn on column numbers.
    #+begin_src emacs-lisp
      (setq column-number-mode t)
      (setq toggle-highlight-column-when-idle 0.1)
    #+end_src
*** Temporary file management
    Deal with temporary files. I don't care about them and this makes
    them go away.
    #+begin_src emacs-lisp
      (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
      (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
    #+end_src
*** auto-complete
    Turn on auto complete.
    #+begin_src emacs-lisp
      (use-package auto-complete
        :ensure t
        :config
        (progn
          (require 'auto-complete-config)
          (ac-config-default)))
    #+end_src
*** Emmet mode
    #+begin_src emacs-lisp
      (use-package emmet-mode
        :ensure t
        :config
        (progn
          (add-hook 'sgml-mode-hook 'emmet-mode)
          (add-hook 'css-mode-hook  'emmet-mode)))
    #+end_src
*** Indentation and buffer cleanup
    This re-indents, untabifies, and cleans up whitespace. It is stolen
    directly from the emacs-starter-kit.
    #+begin_src emacs-lisp
      (defun untabify-buffer ()
        (interactive)
        (untabify (point-min) (point-max)))

      (defun indent-buffer ()
        (interactive)
        (indent-region (point-min) (point-max)))

      (defun cleanup-buffer ()
        "Perform a bunch of operations on the whitespace content of a buffer."
        (interactive)
        (indent-buffer)
        (untabify-buffer)
        (delete-trailing-whitespace))

      (defun cleanup-region (beg end)
        "Remove tmux artifacts from region."
        (interactive "r")
        (dolist (re '("\\\\│\·*\n" "\W*│\·*"))
          (replace-regexp re "" nil beg end)))

      (global-set-key (kbd "C-x M-t") 'cleanup-region)
      (global-set-key (kbd "C-c n") 'cleanup-buffer)

      (setq-default show-trailing-whitespace t)
    #+end_src
*** flyspell
    #+begin_src emacs-lisp
      (setq flyspell-issue-welcome-flag nil)
      (if (eq system-type 'darwin)
          (setq-default ispell-program-name "/usr/local/bin/aspell")
        (setq-default ispell-program-name "/usr/bin/aspell"))
      (setq-default ispell-list-command "list")
    #+end_src
** Language modes
*** Web
    #+begin_src emacs-lisp
      (use-package web-mode
        :ensure t
        :mode ("\\.html?\\'" . web-mode)
        :mode ("\\.html\\.twig?\\'" . web-mode)
        :mode ("\\.tpl\\.php?\\'" . web-mode)
        :mode ("\\.jsx?\\'" . web-mode)
        :config
        (progn
	 (setq web-mode-css-indent-offset 4)
	 (setq web-mode-code-indent-offset 4)
	 (add-hook 'after-change-major-mode-hook
	  (lambda () (if (string= major-mode "web-mode")
	      (turn-off-fci-mode) (turn-on-fci-mode))))))
    #+end_src

*** PHP
    #+begin_src emacs-lisp
      (use-package php-mode
        :ensure t
        :config
        (progn
          (add-to-list 'auto-mode-alist '("\\.inc" . php-mode))
          (add-to-list 'auto-mode-alist '("\\.module" . php-mode))
          (setq php-manual-path "~/Downloads/phpmanualen")))
    #+end_src
*** Vagrant
    #+begin_src emacs-lisp
      (use-package vagrant
        :ensure t
        :config
        (setq vagrant-up-options "--provision"))
    #+end_src
*** YAML
    Add additional file extensions that trigger =yaml-mode=.
    #+begin_src emacs-lisp
      (use-package yaml-mode
        :ensure t
        :config
        (progn
          (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
          (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
          (setq yaml-indent-offset 2)))
    #+end_src
*** CoffeeScript Mode
    The default CoffeeScript mode makes terrible choices. This turns
    everything into 2 space indentations and makes it so the mode
    functions rather than causing you indentation errors every time you
    modify a file.
    #+begin_src emacs-lisp
    (use-package coffee-mode
      :ensure t
      :config
      (progn
	   (defun coffee-custom ()
	    "coffee-mode-hook"
	    (make-local-variable 'tab-width)
	    (set 'tab-width 2))
	   (add-hook 'coffee-mode-hook 'coffee-custom)))
    #+end_src
*** Markdown Mode
    Enable Markdown mode and setup additional file extensions. Use
    pandoc to generate HTML previews from within the mode, and use a
    custom css file to make it a little prettier.
    #+begin_src emacs-lisp
	(use-package markdown-mode
	  :ensure t
	  :config
	  (progn
	    (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
	    (add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
	    (add-hook 'markdown-mode-hook
              (lambda ()
              (visual-line-mode t)
              (writegood-mode t)
              (flyspell-mode t)))
	    (setq markdown-command "pandoc --smart -f markdown -t html")))
    #+end_src
